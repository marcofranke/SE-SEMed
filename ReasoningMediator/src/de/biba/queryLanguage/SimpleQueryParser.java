/* Generated By:JavaCC: Do not edit this line. SimpleQueryParser.java */
package de.biba.queryLanguage;
import java.io.StringReader;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import de.biba.mediator.CompareOperator;
import de.biba.mediator.IQuery;
import de.biba.mediator.InputQuery;
import de.biba.mediator.OutputQuery;
import de.biba.mediator.constraints.ClassConstraint;
import de.biba.mediator.constraints.Constraint;
import de.biba.mediator.constraints.ConstraintList;
import de.biba.mediator.constraints.OrConstraint;
import de.biba.mediator.constraints.PropertyConstraint;
import de.biba.mediator.constraints.SimplePropertyConstraint;
import de.biba.mediator.constraints.insert.ClassInsertConstraint;
import de.biba.mediator.constraints.insert.InsertConstraint;
import de.biba.mediator.constraints.insert.PropertyInsertConstraint;
import de.biba.mediator.constraints.insert.SimplePropertyInsertConstraint;
import de.biba.ontology.datatypes.BooleanDatatype;
import de.biba.ontology.datatypes.Datatype;
import de.biba.ontology.datatypes.NumericDatatype;
import de.biba.ontology.datatypes.StringDatatype;


@SuppressWarnings(value={"all"})
public class SimpleQueryParser implements SimpleQueryParserConstants {
        public static void main(String[] args){
                byte byt_buffer[] = new byte[500];
                while(true){
                        System.out.print("Bitte Abfrage eingeben:");
                        try {
                           int read = System.in.read(byt_buffer,0,500);
                           if(read <=2)
                                   continue;
                           String query = new String(byt_buffer, 0, read-2);
                           StringReader sr = new StringReader(query);
                           SimpleQueryParser sqp = new SimpleQueryParser(sr);
                           sqp.parse(true, false);
                           sr.close();
                           if(query.equals("exit"))
                                   break;
                        }
                        catch(Exception e) {
                                        e.printStackTrace();
                        }
                }
        }

  final public IQuery parse(boolean pAllowQuerying, boolean pAllowWriting) throws ParseException {
                                                             InputQuery res= null; Token t1 = null; Token t2=null; String base = null; ConstraintList el = null; int x = -1; boolean b = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE:
      jj_consume_token(BASE);
      t1 = jj_consume_token(URI);
                         base = t1.image.substring(1,t1.image.length()-1)+"#";
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      jj_consume_token(SELECT);
                 if(!pAllowQuerying)
                        {if (true) throw new ParseException("Unallowed Operation");}
                OutputQuery result = new OutputQuery();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        jj_consume_token(DISTINCT);
                             result.setDistinct(true);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        t1 = jj_consume_token(VARNAME);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACERT:
          jj_consume_token(LBRACERT);
          t2 = jj_consume_token(UNIT);
          jj_consume_token(RBRACERT);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
                         if(t2!=null)
                                result.addColumn(t1.image, t2.image);
                        else
                                result.addColumn(t1.image);

                        t2=null;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARNAME:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(WHERE);
      jj_consume_token(LBRACE);
      el = Expression(base);
                                               result.setConstraint(el);
      jj_consume_token(RBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIMIT:
        x = Limit();
                    result.setLimit(x);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OFFSET:
        x = Offset();
                                                       result.setOffset(x);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDERBY:
        jj_consume_token(ORDERBY);
        t1 = jj_consume_token(VARNAME);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SORTORDER:
          b = sortingOrder();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
                                                     result.addOrdering(t1.image, b); b = true;
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case KOMMA:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_2;
          }
          jj_consume_token(KOMMA);
          t1 = jj_consume_token(VARNAME);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SORTORDER:
            b = sortingOrder();
            break;
          default:
            jj_la1[8] = jj_gen;
            ;
          }
                                                   result.addOrdering(t1.image, b); b = true;
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
         {if (true) return result;}
      break;
    case INSERT:
      jj_consume_token(INSERT);
                res = new InputQuery();
      jj_consume_token(LBRACE);
         InsertConstraint ic;
      label_3:
      while (true) {
        ic = InsertTriple(base);
                                        res.addConstraint(ic);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARNAME:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(RBRACE);
                {if (true) return res;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public InsertConstraint InsertTriple(String base) throws ParseException {
                                            Token t1,t2=null,t3=null;Datatype dt;
    t1 = jj_consume_token(VARNAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case A:
      jj_consume_token(A);
      t2 = jj_consume_token(URI);
      jj_consume_token(DOT);
        if(base!=null)
                {if (true) return new ClassInsertConstraint(t1.image, base+t2.image.substring(1,t2.image.length()-1));}
        else
                {if (true) return new ClassInsertConstraint(t1.image, t2.image.substring(1,t2.image.length()-1));}
      break;
    case URI:
      t2 = jj_consume_token(URI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARNAME:
        t3 = jj_consume_token(VARNAME);
        jj_consume_token(DOT);
        if(base!=null)
                {if (true) return new PropertyInsertConstraint(t1.image, base+t2.image.substring(1,t2.image.length()-1), t3.image);}
        else
                {if (true) return new PropertyInsertConstraint(t1.image, t2.image.substring(1,t2.image.length()-1), t3.image);}
        break;
      case BOOLEANVALUE:
      case DOUBLEVALUE:
      case INTVALUE:
      case STRINGBEGIN:
        dt = value();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACERT:
          jj_consume_token(LBRACERT);
          t3 = jj_consume_token(UNIT);
          jj_consume_token(RBRACERT);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        jj_consume_token(DOT);
        if(base!=null)
                {if (true) return new SimplePropertyInsertConstraint(t1.image,base+t2.image.substring(1,t2.image.length()-1),dt,t3!=null?t3.image:null);}
        else
                {if (true) return new SimplePropertyInsertConstraint(t1.image,t2.image.substring(1,t2.image.length()-1),dt,t3!=null?t3.image:null);}
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ConstraintList Expression(String base) throws ParseException {
                                        ConstraintList el = new ConstraintList(); Constraint e = null;Constraint or = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARNAME:
      e = Triple(base);
      break;
    case LBRACKET:
      e = ListExpression(base);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      or = Expression(base);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
                                                                                 if(or==null)el.addExpression(e); else el.addExpression(new OrConstraint(e,or));
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case VARNAME:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_4;
      }
                                                                                                                                                                    or=null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARNAME:
        e = Triple(base);
        break;
      case LBRACKET:
        e = ListExpression(base);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        or = Expression(base);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
                                                                                                                                                                                                                                                    if(or==null)el.addExpression(e); else el.addExpression(new OrConstraint(e,or));
                                                                                                                                                                                                                                                                                                                                       or=null;
    }
         {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  final public Constraint Triple(String base) throws ParseException {
                                Token t1,t2=null,t3=null;Datatype dt;
    t1 = jj_consume_token(VARNAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case A:
      jj_consume_token(A);
      t2 = jj_consume_token(URI);
      jj_consume_token(DOT);
        if(base!=null)
                {if (true) return new ClassConstraint(t1.image, base+t2.image.substring(1,t2.image.length()-1));}
        else
                {if (true) return new ClassConstraint(t1.image, t2.image.substring(1,t2.image.length()-1));}
      break;
    case URI:
      t2 = jj_consume_token(URI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARNAME:
        t3 = jj_consume_token(VARNAME);
        jj_consume_token(DOT);
        if(base!=null)
                {if (true) return new PropertyConstraint(t1.image, base+t2.image.substring(1,t2.image.length()-1), t3.image);}
        else
                {if (true) return new PropertyConstraint(t1.image, t2.image.substring(1,t2.image.length()-1), t3.image);}
        break;
      case OPERATOR:
        t3 = jj_consume_token(OPERATOR);
        dt = value();
        jj_consume_token(DOT);
        CompareOperator op = CompareOperator.EQUALS;
        if(t3.image.equals("=="))
                op = CompareOperator.EQUALS;
        else if(t3.image.equals("!="))
                op = CompareOperator.UNEQUALS;
        else if(t3.image.equals(">="))
                op = CompareOperator.GREATEREQUAL;
        else if(t3.image.equals(">"))
                op = CompareOperator.GREATER;
        else if(t3.image.equals("<="))
                op = CompareOperator.LESSEQUAL;
        else if(t3.image.equals("<"))
                op = CompareOperator.LESS;
        if(base!=null)
                {if (true) return new SimplePropertyConstraint(t1.image,base+t2.image.substring(1,t2.image.length()-1),dt,op);}
        else
                {if (true) return new SimplePropertyConstraint(t1.image,t2.image.substring(1,t2.image.length()-1),dt,op);}
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ConstraintList ListExpression(String base) throws ParseException {
                                            ConstraintList le;
    jj_consume_token(LBRACKET);
    le = Expression(base);
    jj_consume_token(RBRACKET);
         {if (true) return le;}
    throw new Error("Missing return statement in function");
  }

  final public void filter() throws ParseException {
    jj_consume_token(LBRACE);
    jj_consume_token(VARNAME);
    jj_consume_token(OPERATOR);
    value();
    jj_consume_token(RBRACE);
  }

  final public Datatype value() throws ParseException {
                  Token t; Datatype v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLEVALUE:
      t = jj_consume_token(DOUBLEVALUE);
                          v = new NumericDatatype(Double.parseDouble(t.image));
      break;
    case INTVALUE:
      t = jj_consume_token(INTVALUE);
                      v = new NumericDatatype(Integer.parseInt(t.image));
      break;
    case STRINGBEGIN:
      jj_consume_token(STRINGBEGIN);
      t = jj_consume_token(STRINGVALUE);
      jj_consume_token(STRINGEND);
                                                    v = new StringDatatype(t.image);
      break;
    case BOOLEANVALUE:
      t = jj_consume_token(BOOLEANVALUE);
                          v = new BooleanDatatype(Boolean.parseBoolean(t.image));
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public int Limit() throws ParseException {
             Token t1;
    jj_consume_token(LIMIT);
    t1 = jj_consume_token(INTVALUE);
         {if (true) return Integer.parseInt(t1.image);}
    throw new Error("Missing return statement in function");
  }

  final public int Offset() throws ParseException {
              Token t;
    jj_consume_token(OFFSET);
    t = jj_consume_token(INTVALUE);
         {if (true) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public boolean sortingOrder() throws ParseException {
                        Token t;
    t = jj_consume_token(SORTORDER);
         if(t.image.toLowerCase().equals("asc")) {if (true) return true;} else {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SimpleQueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x4000,0x0,0x0,0x80,0x100,0x10,0x0,0x10,0x20,0x0,0xc00,0x0,0xe0020000,0x40000,0x2000000,0x8000,0x2000000,0x2000000,0x8000,0x10000000,0x40000,0xe0020000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x200,0x8,0x0,0x0,0x0,0x2,0x0,0x0,0x8,0x0,0x200,0x8,0x1,0x8,0x0,0x8,0x8,0x0,0x8,0x1,0x0,};
   }

  /** Constructor with InputStream. */
  public SimpleQueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleQueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SimpleQueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SimpleQueryParser(SimpleQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
