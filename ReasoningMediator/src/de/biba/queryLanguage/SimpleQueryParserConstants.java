/* Generated By:JavaCC: Do not edit this line. SimpleQueryParserConstants.java */
package de.biba.queryLanguage;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SimpleQueryParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SORTORDER = 4;
  /** RegularExpression Id. */
  int ORDERBY = 5;
  /** RegularExpression Id. */
  int BASE = 6;
  /** RegularExpression Id. */
  int LIMIT = 7;
  /** RegularExpression Id. */
  int OFFSET = 8;
  /** RegularExpression Id. */
  int WHERE = 9;
  /** RegularExpression Id. */
  int SELECT = 10;
  /** RegularExpression Id. */
  int INSERT = 11;
  /** RegularExpression Id. */
  int OPTIONAL = 12;
  /** RegularExpression Id. */
  int FILTER = 13;
  /** RegularExpression Id. */
  int DISTINCT = 14;
  /** RegularExpression Id. */
  int OR = 15;
  /** RegularExpression Id. */
  int AND = 16;
  /** RegularExpression Id. */
  int BOOLEANVALUE = 17;
  /** RegularExpression Id. */
  int A = 18;
  /** RegularExpression Id. */
  int DATE = 19;
  /** RegularExpression Id. */
  int UNDERSCORE = 20;
  /** RegularExpression Id. */
  int HASH = 21;
  /** RegularExpression Id. */
  int MINUS = 22;
  /** RegularExpression Id. */
  int COLON = 23;
  /** RegularExpression Id. */
  int SLASH = 24;
  /** RegularExpression Id. */
  int LBRACKET = 25;
  /** RegularExpression Id. */
  int RBRACKET = 26;
  /** RegularExpression Id. */
  int DOT = 27;
  /** RegularExpression Id. */
  int OPERATOR = 28;
  /** RegularExpression Id. */
  int DOUBLEVALUE = 29;
  /** RegularExpression Id. */
  int INTVALUE = 30;
  /** RegularExpression Id. */
  int STRINGBEGIN = 31;
  /** RegularExpression Id. */
  int URI = 32;
  /** RegularExpression Id. */
  int KOMMA = 33;
  /** RegularExpression Id. */
  int SEMICOLON = 34;
  /** RegularExpression Id. */
  int VARNAME = 35;
  /** RegularExpression Id. */
  int CHAR = 36;
  /** RegularExpression Id. */
  int DIGIT = 37;
  /** RegularExpression Id. */
  int QUESTIONMARK = 38;
  /** RegularExpression Id. */
  int LBRACE = 39;
  /** RegularExpression Id. */
  int RBRACE = 40;
  /** RegularExpression Id. */
  int LBRACERT = 41;
  /** RegularExpression Id. */
  int STRINGVALUE = 42;
  /** RegularExpression Id. */
  int STRINGEND = 43;
  /** RegularExpression Id. */
  int UNIT = 44;
  /** RegularExpression Id. */
  int RBRACERT = 45;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STRING = 1;
  /** Lexical state. */
  int UNITSTATE = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "<SORTORDER>",
    "\"ORDERBY\"",
    "\"BASE\"",
    "\"LIMIT\"",
    "\"OFFSET\"",
    "\"WHERE\"",
    "\"SELECT\"",
    "\"INSERT\"",
    "\"OPTIONAL\"",
    "\"FILTER\"",
    "\"DISTINCT\"",
    "\"OR\"",
    "\"AND\"",
    "<BOOLEANVALUE>",
    "\"a\"",
    "<DATE>",
    "\"_\"",
    "\"#\"",
    "\"-\"",
    "\":\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "<OPERATOR>",
    "<DOUBLEVALUE>",
    "<INTVALUE>",
    "\"\\\"\"",
    "<URI>",
    "\",\"",
    "\";\"",
    "<VARNAME>",
    "<CHAR>",
    "<DIGIT>",
    "\"?\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "<STRINGVALUE>",
    "\"\\\"\"",
    "<UNIT>",
    "\"]\"",
  };

}
